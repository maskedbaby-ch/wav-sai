################################################################################################################################################################################################################################################################### @file commserver.py# @version 1.0.0# \brief Communication server class file.# \project Common# \author Damian Nowok# \author Freescale Semiconductor, Roznov pod Radhostem, Czech Republic# @lastmodusr b22656# @lastmoddate May-31-2012# Freescale Semiconductor Inc.# (c) Copyright 2012 Freescale Semiconductor Inc.# ALL RIGHTS RESERVED.##################################################################################################################################################################################################################################################################from common.communication import commimport SocketServerREQUEST_QUEUE_SIZE = 10######################################################################################################################### Classes ################################################################################################################################class CommServerException(comm.CommException): passclass CommServer(SocketServer.BaseRequestHandler,comm.Comm):    """        This class is responsible for Server communication        A thread that servs client        Constants:        Variables:    """    def handle(self):        """            This function handles all communication from clients            Default CommServer behavior is to do communication loop back.            This function should be overloaded            Input:            Nothing            Returns:            Nothing        """        data = self.receive()        self.send(data)        self.close()    def _lowLevelRecv(self,buffer):        """            Low level receive function.            Input:            buffer  - Buffer size            Returns:            Received data        """        return self.request.recv(buffer)    def _lowLevelSend(self,data):        """            Low level send function.            Input:            data    - data to send            Returns:            Send data size        """        return self.request.send(data)    def _lowLevelClose(self):        """            Low level close function.            Input:            Nothing            Returns:            Nothing        """        self.request.close()######################################################################################################################### Functions ##############################################################################################################################def server(ip,port):    """        This function starts socket server.        This function should be called only once.        Input:        ip      - Ip address of server        port    - Port address of server        Returns:        socket server handle    """    import socket    import SocketServer    import thread    from common.log import display    class Handler(CommServer): pass    SocketServer.ThreadingTCPServer.request_queue_size=REQUEST_QUEUE_SIZE    try:        server_handle = SocketServer.ThreadingTCPServer((ip,port),Handler)    except socket.error as error:        raise CommServerException(str(error))    display.output.log("Listening on " + comm.getHostName() + ":" + str(port),0)    thread.start_new_thread(server_handle.serve_forever,())    return server_handle, Handler