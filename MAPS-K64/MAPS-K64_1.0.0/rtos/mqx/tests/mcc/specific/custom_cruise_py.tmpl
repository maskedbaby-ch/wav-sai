from af.engine.pete.requisite import *
import os

test_class = "[% class %]"
tool = "[% tool %]"
configuration = "[% config %]"
platform = "[% platform %]"
module = "[% module %]"
loadto = "[% target %]"
compiler = "_".join([platform, tool, configuration])
description = name = "_".join(["ar",test_class, module, compiler])
local_conf_name = "_".join([module, platform, tool, configuration])

remote_platforms  = { 'twrvf65gs10_a5' : 'twrvf65gs10_m4',
                      'twrvf65gs10_m4' : 'twrvf65gs10_a5',
                      'vybrid_autoevb_a5' : 'vybrid_autoevb_m4',
                      'vybrid_autoevb_m4' : 'vybrid_autoevb_a5'
                    }
remote_loadtos = { 'INTRAM' : 'DDR',
                   'DDR'    : 'INTRAM'
                 }
remote_platform = remote_platforms[platform];
remote_loadto = remote_loadtos[loadto]

main = FatalSequence()

remote = Sequence("remote")
[% FOREACH alt_config IN alt_configs -%]
# building "[% alt_config %]" cofiguration
# remove old report files
remote_setup = Sequence()
# remove old report files
if not os.path.exists(path_test_results(name)):
    os.makedirs(path_test_results(name))
else:
    files_to_delete = os.path.join(path_test_results(name),"*")
    from sys import platform as _platform
    if _platform == "win32":
        from common.libs import cygwin
        files_to_delete = cygwin.toCygwinPath(files_to_delete)
    remote_setup.append(execute, "rm -f " + files_to_delete)

# create local_config file
local_conf_name = "_".join([module,platform,tool,configuration,"[% alt_config %]", "mcc"])
remote_setup.append(echo, ["CNFG=" + "[% alt_config %]",
                    "CCOV_ENABLE=" + config.ccov_enable,
                    "CCOV_TYPE=" + config.ccov_type,
                    "CCOV_FILTER_LIB=" + config.ccov_filter_lib,
                    "CCOV_FILTER_OUT=" + config.ccov_filter_out,
                    "CCOV_FILTER_IN=" + config.ccov_filter_in,
                    "PS=" + config.PS,
                    "PS_IP=" + config.PS_IP,
                    "PS_ID=" + config.PS_ID,
                    "RRUN=" + config.RRun,
                    "RRUN_IP=" + config.RRun_IP,
                    "RRUN_PORT=" + config.RRun_port,
                    "RRUN_DEVICE=" + config.RRun_device,
                    "DEBUGGER=" + config.debugger,
                    "PE_DIR=" + config.pe_dir,
                    "IARARM_DIR=" + config.iar_dir,
                    "CW10_DIR=" + config.cw10_dir,
                    "CW10_DEBUGGER_DIR=" + config.cw10_debugger_dir,
                    "CW10GCC_DIR=" + config.cw10gcc_dir,
                    "GCC_ARM_DIR=" + config.gcc_arm_dir,
                    "GCC_CS_DIR=" + config.gcc_cs_dir,
                    "DS5_DIR=" + config.ds5_dir,
                    "UV4_DIR=" + config.uv4_dir,
                    "T32_DIR=" + config.t32_dir,
                    "FRM_DIR=" + config.frm_dir,
                    "DEV_DIR=" + config.dev_dir,
                    "OUTPUT_DIR=" + path_output(name, True),
                    "CONFIGURATION=" + configuration,
                    "TOOLCHAIN=" + tool,
                    "PLATFORM=" + remote_platform,
                    "MODULE=" + module,
                    "CCDEF=-DMCC_TEST_APP=0"], 
            os.path.join(config.frm_dir, "testfrm", "make", "local_config_" + local_conf_name + ".mak"))
remote.append(remote_setup)

# clean libraries
remote_clean = Sequence()
[% FOREACH lib IN libs -%]
remote_clean.append(beart, "[% lib %]", "clean", path_logs(name),
              "make clean_[% lib %] LOCAL_CONF="+local_conf_name+" BUILD_TYPE=LIB CFG_MAK_FILE="+config.dev_dir+"/tests/autofrm/beart/config_beart.mak",
              config.frm_dir + "/testfrm/make"
              )
[% END -%]
remote.append(remote_clean)

#generate .mak files and post-build scripts
remote_generate = Sequence()
remote_generate.append(execute,"perl "+config.dev_dir+"/generator_new/gutils/mqx_beart.pl file="+config.dev_dir+"/generator_new/records/mqx_records/tests/"+remote_platform+".yml type=library tool="+tool+" config="+configuration+" alt_config=[% alt_config %] ccov="+config.ccov_enable)
remote_generate.append(execute,"perl "+config.dev_dir+"/generator_new/gutils/mqx_batch.pl file="+config.dev_dir+"/generator_new/records/mqx_records/tests/"+remote_platform+".yml")
remote_generate.append(execute,"perl "+config.dev_dir+"/generator_new/gutils/mqx_beart.pl file="+config.dev_dir+"/generator_new/records/mqx_records/tests/"+remote_platform+".yml type=application section=test-"+module+" tool="+tool+" config="+configuration)
remote.append(remote_generate)

#parse libraries
remote_parse = Sequence()
[% FOREACH lib IN libs -%]
remote_parse.append(beart, "[% lib %]", "parse", path_logs(name),
              "make parse_[% lib %] LOCAL_CONF="+local_conf_name+" BUILD_TYPE=LIB CFG_MAK_FILE="+config.dev_dir+"/tests/autofrm/beart/config_beart.mak",
              config.frm_dir + "/testfrm/make"
              )
[% END -%]        
remote.append(remote_parse)

#build libraries
remote_build = Sequence()
[% FOREACH lib IN libs -%]
remote_build.append(beart, "[% lib %]", "build", path_logs(name),
              "make -j10 build_[% lib %] LOCAL_CONF="+local_conf_name+" BUILD_TYPE=LIB CFG_MAK_FILE="+config.dev_dir+"/tests/autofrm/beart/config_beart.mak",
              config.frm_dir + "/testfrm/make"
              )
[% END -%]
remote.append(remote_build)

[% FOREACH test IN tests.sort -%]
# [% test %]_[% alt_config %]
short_test_name = "remote_[% test %]_[% alt_config %]"
full_test_name = '_'.join([module, "[% test %]", remote_platform, tool, configuration, "[% alt_config %]"])
make_params = "TEST="+full_test_name+" LOCAL_CONF="+local_conf_name+" LOAD_TO="+remote_loadto+" BUILD_TYPE=APP CNFG=[% alt_config %] CFG_MAK_FILE="+config.dev_dir+"/tests/autofrm/beart/config_beart.mak"
remote_[% test %]_[% alt_config %] = Sequence()
remote_[% test %]_[% alt_config %].append(beart, short_test_name, "clean", path_logs(name), "make clean " + make_params, config.frm_dir + "/testfrm/make")
remote_[% test %]_[% alt_config %].append(beart, short_test_name, "parse", path_logs(name), "make parse " + make_params, config.frm_dir + "/testfrm/make")
remote_[% test %]_[% alt_config %].append(beart, short_test_name, "build", path_logs(name), "make build " + make_params, config.frm_dir + "/testfrm/make")
remote.append(remote_[% test %]_[% alt_config %])
[%  END -%]

[% END -%]
main.append(remote)

setup = FatalSequence("setup")
# remove old report files
if not os.path.exists(path_test_results(name)):
    os.makedirs(path_test_results(name))
else:
    files_to_delete = os.path.join(path_test_results(name),"*")
    from sys import platform as _platform
    if _platform == "win32":
        from common.libs import cygwin
        files_to_delete = cygwin.toCygwinPath(files_to_delete)
    setup.append(execute, "rm -f " + files_to_delete)

# create local_config file
setup.append(echo, [
                    "CCOV_ENABLE=" + config.ccov_enable,
                    "CCOV_TYPE=" + config.ccov_type,
                    "CCOV_FILTER_LIB=" + config.ccov_filter_lib,
                    "CCOV_FILTER_OUT=" + config.ccov_filter_out,
                    "CCOV_FILTER_IN=" + config.ccov_filter_in,
                    "PS=" + config.PS,
                    "PS_IP=" + config.PS_IP,
                    "PS_ID=" + config.PS_ID,
                    "RRUN=" + config.RRun,
                    "RRUN_IP=" + config.RRun_IP,
                    "RRUN_PORT=" + config.RRun_port,
                    "RRUN_DEVICE=" + config.RRun_device,
                    "DEBUGGER=" + config.debugger,
                    "PE_DIR=" + config.pe_dir,
                    "IARARM_DIR=" + config.iar_dir,
                    "CW10_DIR=" + config.cw10_dir,
                    "CW10_DEBUGGER_DIR=" + config.cw10_debugger_dir,
                    "CW10GCC_DIR=" + config.cw10gcc_dir,
                    "GCC_ARM_DIR=" + config.gcc_arm_dir,
                    "GCC_CS_DIR=" + config.gcc_cs_dir,
                    "DS5_DIR=" + config.ds5_dir,
                    "UV4_DIR=" + config.uv4_dir,
                    "T32_DIR=" + config.t32_dir,
                    "FRM_DIR=" + config.frm_dir,
                    "DEV_DIR=" + config.dev_dir,
                    "OUTPUT_DIR=" + path_output(name, True),
                    "LOAD_TO=" + loadto,
                    "CONFIGURATION=" + configuration,
                    "TOOLCHAIN=" + tool,
                    "PLATFORM=" + platform,
                    "MODULE=" + module,
                    "BUILD_TYPE=APP",
                    "CCDEF=-DMCC_TEST_APP=1",
                    "TEST_PARAMS=@PLATFORM=" + platform + ",REMOTE_PLATFORM=" + remote_platform,
                    "ALTERNATE_CMM_SCRIPT=" + config.dev_dir + "/tests/mcc/specific/" + platform + "/custom_loader.cmm.m4"
                    ],
            os.path.join(config.frm_dir, "testfrm", "make", "local_config_" + local_conf_name + ".mak"))
main.append(setup)

# generate .mak files
generate = Sequence("generate")
generate.append(execute,"perl "+config.dev_dir+"/generator_new/gutils/mqx_beart.pl file="+ config.dev_dir+"/generator_new/records/mqx_records/tests/"+platform+".yml type=application section=test-"+module+" tool="+tool+" config="+configuration)
main.append(generate)

test = Sequence("TEST")
[% FOREACH test IN tests.sort -%]
[%  FOREACH alt_config IN alt_configs -%]
# [% test %]_[% alt_config %]
short_test_name = "[% test %]_[% alt_config %]"
full_test_name = '_'.join([module, "[% test %]", platform, tool, configuration, "[% alt_config %]"])
full_remote_name = '_'.join([module, "[% test %]", remote_platform, tool, configuration, "[% alt_config %]"])
make_params = "TEST="+full_test_name+" LOCAL_CONF="+local_conf_name+" CNFG=[% alt_config %] CFG_MAK_FILE="+config.dev_dir+"/tests/autofrm/beart/config_beart.mak"
make_params += " CFG_OUT_FILES="+path_build(name, True)+"/"+full_remote_name+"/out/"+full_remote_name+".[% ext %]"
[% test %]_[% alt_config %] = Sequence()
[% test %]_[% alt_config %].append(beart, short_test_name, "clean", path_logs(name), "make clean " + make_params, config.frm_dir + "/testfrm/make")
[% test %]_[% alt_config %].append(beart, short_test_name, "parse", path_logs(name), "make parse " + make_params, config.frm_dir + "/testfrm/make")
[% test %]_[% alt_config %].append(beart, short_test_name, "build", path_logs(name), "make build " + make_params, config.frm_dir + "/testfrm/make")
if config.build_only.lower() != 'on' :
    [% test %]_[% alt_config %].append(beart, short_test_name, "run", path_logs(name), "make run " + make_params, config.frm_dir + "/testfrm/make")
[% FILTER repeat(rerun_count) %]
    [% test %]_[% alt_config %].append(execute, "python "+config.dev_dir+"/tests/autofrm/utils/eunit/tools/result_check.py -d "+os.path.join(path_build(name),full_test_name,"debug"))
    [% test %]_[% alt_config %].append(beart, short_test_name, "run", path_logs(name), "make run " + make_params, config.frm_dir + "/testfrm/make")
[% END %]
    [% test %]_[% alt_config %].append(beart, short_test_name, "report", path_logs(name), "make report " + make_params, config.frm_dir + "/testfrm/make")
test.append([% test %]_[% alt_config %])

[%  END -%]
[% END -%]

main.append(test)

if config.reporter.lower() == 'on' :
    main.ultimately(execute,"python "+config.dev_dir+"/tests/autofrm/utils/board/result_send.py -s --ip "+config.reporter_ip+" --port "+config.reporter_port+" --platform "+platform+" --compiler "+tool+" --config "+configuration+ \
    " --target "+loadto+" --class "+test_class+" --module "+module+" --apps[% FOREACH test IN tests.sort %] [% test %][% END %] --xml_dir "+path_test_results(name))

main.ultimately(trg,path_output(name, True),path_logs(name)+"\\downloads",path_logs(name),None,None,config.project_full_name,config.test_station,platform,config.derivative)
